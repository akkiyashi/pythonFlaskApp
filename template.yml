Parameters:
  ContainerPort:
    Type: Number
    Default: 8080
  HostPort:
    Type: Number
    Default: 8080

Resources:
  AppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  AppSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: AppVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "eu-west-1a"
  IGW:
    Type: AWS::EC2::InternetGateway
  VPCAttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: AppVPC
      InternetGatewayId:
        Ref: IGW
  AppRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: AppVPC
  AppSubnetRoute:
    Type: AWS::EC2::Route
    DependsOn: IGW
    Properties:
      RouteTableId:
        Ref: AppRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: IGW
  AppSubnetRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: AppSubnet
      RouteTableId:
        Ref: AppRouteTable
  TaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  FlaskSecurityRule:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic to app
      VpcId:
        Ref: AppVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: PythonFlaskCluster
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  FlaskTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "Flask-TaskDef"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 0.5GB
      ExecutionRoleArn: !Ref TaskRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        -
          Name: "FlaskApp"
          Image: "Account_id.dkr.ecr.eu-west-1.amazonaws.com/flaskapp:latest"
          Cpu: 256
          PortMappings:
            -
              ContainerPort: !Ref ContainerPort
              HostPort: !Ref HostPort
          Memory: 512
          Essential: true

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 1
      TaskDefinition: !Ref FlaskTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref AppSubnet
          SecurityGroups:
            - !Ref FlaskSecurityRule
